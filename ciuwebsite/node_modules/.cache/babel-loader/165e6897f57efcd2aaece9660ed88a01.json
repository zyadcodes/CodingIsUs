{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zyad/Desktop/GitHub/CodingIsUs/ciuwebsite/src/MobilePlayground/MobilePlayground.js\",\n    _s = $RefreshSig$();\n\n// This is going to be the screen in the mobile app which will contain the coding playground. It will utilize React Native\n// web in order to contain all of the code that is used in the app\nimport React, { useState } from \"react\";\nimport { View, Text, Dimensions, TextInput, TouchableOpacity } from \"react-native-web\";\nimport MobilePlaygroundStyle from \"./MobilePlaygroundStyle\";\nimport strings from \"../config/strings\";\nimport fontStyles from \"../config/fontStyles\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport \"./MobilePlaygroundStyle.css\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/mode-csharp\";\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport * as firebase from 'firebase/app';\nimport 'firebase/functions'; // Initializes firebase\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAuPVR7ZPOMddAQX2_asx0VsOLpTlfF4NU\",\n  authDomain: \"coding-is-us.firebaseapp.com\",\n  databaseURL: \"https://coding-is-us.firebaseio.com\",\n  projectId: \"coding-is-us\",\n  storageBucket: \"coding-is-us.appspot.com\",\n  messagingSenderId: \"234463436871\",\n  appId: \"1:234463436871:web:4cdebed85b0ecc0d2d1162\",\n  measurementId: \"G-YD5RKZX6KZ\"\n}); // Creates the functional component\n\nconst MobilePlayground = () => {\n  _s();\n\n  // The state of the code being entered and the language selected. Also the loading state\n  const [isCompiling, setIsCompiling] = useState(false);\n  const [languageSelected, setLanguageSelected] = useState(\"java\");\n  const [code, setCode] = useState(\"\");\n  const [output, setOutput] = useState(\"\"); // The screen dimensions\n\n  const screenHeight = Dimensions.get(\"window\").height;\n  const screenWidth = Dimensions.get(\"window\").width; // Returns the UI of the screen\n\n  return /*#__PURE__*/_jsxDEV(View, {\n    style: MobilePlaygroundStyle.container,\n    children: [/*#__PURE__*/_jsxDEV(View, {\n      style: MobilePlaygroundStyle.headerStyle,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        style: { ...fontStyles.longTitleTextStyle,\n          ...fontStyles.white\n        },\n        children: strings.Playground\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: MobilePlaygroundStyle.dropdownContainer,\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        controlClassName: \"controlClassName\",\n        menuClassName: \"controlClassName\",\n        options: [{\n          value: \"java\",\n          label: \"Java\"\n        }, {\n          value: \"c\",\n          label: \"C\"\n        }, {\n          value: \"csharp\",\n          label: \"C#\"\n        }, {\n          value: \"cpp\",\n          label: \"C++\"\n        }, {\n          value: \"js\",\n          label: \"JavaScript\"\n        }, {\n          value: \"python\",\n          label: \"Python\"\n        }],\n        onChange: value => setLanguageSelected(value.value),\n        value: languageSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: MobilePlaygroundStyle.typeCodeBelowTextContainer,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        style: { ...fontStyles.bigTextStyle,\n          ...fontStyles.black\n        },\n        children: strings.TypeYourCodeBelow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: MobilePlaygroundStyle.codeEditorContainer,\n      children: /*#__PURE__*/_jsxDEV(AceEditor, {\n        className: \"editorStyle\",\n        width: screenWidth,\n        height: screenHeight * 0.2,\n        mode: languageSelected === \"java\" ? \"java\" : languageSelected === \"c\" ? \"c_cpp\" : languageSelected === \"csharp\" ? \"csharp\" : languageSelected === \"cpp\" ? \"c_cpp\" : languageSelected === \"js\" ? \"javascript\" : \"python\",\n        value: code,\n        theme: \"monokai\",\n        onChange: newCode => setCode(newCode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: MobilePlaygroundStyle.typeCodeBelowTextContainer,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        style: { ...fontStyles.bigTextStyle,\n          ...fontStyles.black\n        },\n        children: strings.Output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      multiline: true,\n      value: output,\n      editable: true,\n      style: MobilePlaygroundStyle.outputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TouchableOpacity, {\n      disabled: isCompiling,\n      style: MobilePlaygroundStyle.runCodeButton,\n      onPress: async () => {\n        setIsCompiling(true);\n        setOutput(strings.Compiling);\n        const compiledOutput = await firebase.functions().httpsCallable(\"runCode\")({\n          code,\n          language: languageSelected\n        });\n        setOutput(compiledOutput);\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        style: { ...fontStyles.mainTextStyle,\n          ...fontStyles.white\n        },\n        children: strings.RunCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}; // Exports the playground\n\n\n_s(MobilePlayground, \"1ab/6KYstbfAuAn1NT8fXbgAXpg=\");\n\n_c = MobilePlayground;\nexport default MobilePlayground;\n\nvar _c;\n\n$RefreshReg$(_c, \"MobilePlayground\");","map":{"version":3,"sources":["/Users/zyad/Desktop/GitHub/CodingIsUs/ciuwebsite/src/MobilePlayground/MobilePlayground.js"],"names":["React","useState","View","Text","Dimensions","TextInput","TouchableOpacity","MobilePlaygroundStyle","strings","fontStyles","Dropdown","AceEditor","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","MobilePlayground","isCompiling","setIsCompiling","languageSelected","setLanguageSelected","code","setCode","output","setOutput","screenHeight","get","height","screenWidth","width","container","headerStyle","longTitleTextStyle","white","Playground","dropdownContainer","value","label","typeCodeBelowTextContainer","bigTextStyle","black","TypeYourCodeBelow","codeEditorContainer","newCode","Output","outputStyle","runCodeButton","Compiling","compiledOutput","functions","httpsCallable","language","mainTextStyle","RunCode"],"mappings":"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","sourcesContent":["// This is going to be the screen in the mobile app which will contain the coding playground. It will utilize React Native\n// web in order to contain all of the code that is used in the app\nimport React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  Dimensions,\n  TextInput,\n  TouchableOpacity,\n} from \"react-native-web\";\nimport MobilePlaygroundStyle from \"./MobilePlaygroundStyle\";\nimport strings from \"../config/strings\";\nimport fontStyles from \"../config/fontStyles\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport \"./MobilePlaygroundStyle.css\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/mode-csharp\";\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport * as firebase from 'firebase/app';\nimport 'firebase/functions';\n\n// Initializes firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAuPVR7ZPOMddAQX2_asx0VsOLpTlfF4NU\",\n  authDomain: \"coding-is-us.firebaseapp.com\",\n  databaseURL: \"https://coding-is-us.firebaseio.com\",\n  projectId: \"coding-is-us\",\n  storageBucket: \"coding-is-us.appspot.com\",\n  messagingSenderId: \"234463436871\",\n  appId: \"1:234463436871:web:4cdebed85b0ecc0d2d1162\",\n  measurementId: \"G-YD5RKZX6KZ\",\n});\n\n// Creates the functional component\nconst MobilePlayground = () => {\n  // The state of the code being entered and the language selected. Also the loading state\n  const [isCompiling, setIsCompiling] = useState(false);\n  const [languageSelected, setLanguageSelected] = useState(\"java\");\n  const [code, setCode] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n\n  // The screen dimensions\n  const screenHeight = Dimensions.get(\"window\").height;\n  const screenWidth = Dimensions.get(\"window\").width;\n\n  // Returns the UI of the screen\n  return (\n    <View style={MobilePlaygroundStyle.container}>\n      <View style={MobilePlaygroundStyle.headerStyle}>\n        <Text style={{ ...fontStyles.longTitleTextStyle, ...fontStyles.white }}>\n          {strings.Playground}\n        </Text>\n      </View>\n      <View style={MobilePlaygroundStyle.dropdownContainer}>\n        <Dropdown\n          controlClassName={\"controlClassName\"}\n          menuClassName={\"controlClassName\"}\n          options={[\n            { value: \"java\", label: \"Java\" },\n            { value: \"c\", label: \"C\" },\n            { value: \"csharp\", label: \"C#\" },\n            { value: \"cpp\", label: \"C++\" },\n            { value: \"js\", label: \"JavaScript\" },\n            { value: \"python\", label: \"Python\" },\n          ]}\n          onChange={(value) => setLanguageSelected(value.value)}\n          value={languageSelected}\n        />\n      </View>\n      <View style={MobilePlaygroundStyle.typeCodeBelowTextContainer}>\n        <Text style={{ ...fontStyles.bigTextStyle, ...fontStyles.black }}>\n          {strings.TypeYourCodeBelow}\n        </Text>\n      </View>\n      <View style={MobilePlaygroundStyle.codeEditorContainer}>\n        <AceEditor\n          className={\"editorStyle\"}\n          width={screenWidth}\n          height={screenHeight * 0.2}\n          mode={\n            languageSelected === \"java\"\n              ? \"java\"\n              : languageSelected === \"c\"\n              ? \"c_cpp\"\n              : languageSelected === \"csharp\"\n              ? \"csharp\"\n              : languageSelected === \"cpp\"\n              ? \"c_cpp\"\n              : languageSelected === \"js\"\n              ? \"javascript\"\n              : \"python\"\n          }\n          value={code}\n          theme=\"monokai\"\n          onChange={(newCode) => setCode(newCode)}\n        />\n      </View>\n      <View style={MobilePlaygroundStyle.typeCodeBelowTextContainer}>\n        <Text style={{ ...fontStyles.bigTextStyle, ...fontStyles.black }}>\n          {strings.Output}\n        </Text>\n      </View>\n      <TextInput\n        multiline={true}\n        value={output}\n        editable={true}\n        style={MobilePlaygroundStyle.outputStyle}\n      />\n      <TouchableOpacity\n        disabled={isCompiling}\n        style={MobilePlaygroundStyle.runCodeButton}\n        onPress={async () => {\n          setIsCompiling(true);\n          setOutput(strings.Compiling);\n          const compiledOutput = await firebase\n            .functions()\n            .httpsCallable(\"runCode\")({ code, language: languageSelected });\n          setOutput(compiledOutput);\n        }}\n      >\n        <Text style={{ ...fontStyles.mainTextStyle, ...fontStyles.white }}>\n          {strings.RunCode}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n// Exports the playground\nexport default MobilePlayground;\n"]},"metadata":{},"sourceType":"module"}