{"ast":null,"code":"// This method will allow the app to have a compiler and run code from a variety of different languages\nconst fetch = require(\"node-fetch\");\n\nconst got = require(\"got\");\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\nconst languages = {\n  java: 10,\n  c: 11,\n  csharp: 27,\n  cpp: 44,\n  js: 56,\n  python: 116\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n};\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language);\n  console.log(output);\n  return output;\n}; // The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\n\n\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken, {\n    method: \"POST\",\n    body: JSON.stringify({\n      compilerId: languages[language],\n      source: code\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  await sleep(2000);\n  const output = await getSubmission(submissionID);\n  return output;\n};\n\nconst getSubmission = async submissionID => {\n  const result = await fetch(\"https://\" + endpoint + \"/api/v4/submissions/\" + submissionID + \"?access_token=\" + accessToken, {\n    method: \"GET\"\n  });\n  const finalResult = await result.json();\n\n  if (finalResult.executing === true) {\n    await sleep(2000);\n    const output = await getSubmission(submissionID);\n    return output;\n  } else {\n    if (finalResult.result.streams.output) {\n      const uri = finalResult.result.streams.output.uri;\n      const response = await got(uri);\n      return response.body;\n    } else {\n      const uri = finalResult.result.streams.cmpinfo.uri;\n      const response = await got(uri);\n      return response.body;\n    }\n  }\n};\n\nrunCode(`\nprint(\"Hello World!\")\n`, \"python\");","map":{"version":3,"sources":["/Users/zyad/Desktop/GitHub/CodingIsUs/ciuwebsite/src/config/Compiler.js"],"names":["fetch","require","got","accessToken","endpoint","languages","java","c","csharp","cpp","js","python","sleep","ms","Promise","resolve","setTimeout","runCode","code","language","output","postSubmission","console","log","submission","method","body","JSON","stringify","compilerId","source","headers","submissionJSON","json","submissionID","id","getSubmission","result","finalResult","executing","streams","uri","response","cmpinfo"],"mappings":"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","sourcesContent":["// This method will allow the app to have a compiler and run code from a variety of different languages\nconst fetch = require(\"node-fetch\");\nconst got = require(\"got\");\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\n\nconst languages = {\n  java: 10,\n  c: 11,\n  csharp: 27,\n  cpp: 44,\n  js: 56,\n  python: 116,\n};\n\nconst sleep = (ms) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n};\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language);\n  console.log(output);\n  return output;\n};\n\n// The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\n    \"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        compilerId: languages[language],\n        source: code,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  await sleep(2000);\n  const output = await getSubmission(submissionID);\n  return output;\n};\n\nconst getSubmission = async (submissionID) => {\n  const result = await fetch(\n    \"https://\" +\n      endpoint +\n      \"/api/v4/submissions/\" +\n      submissionID +\n      \"?access_token=\" +\n      accessToken,\n    {\n      method: \"GET\",\n    }\n  );\n\n  const finalResult = await result.json();\n  if (finalResult.executing === true) {\n    await sleep(2000);\n    const output = await getSubmission(submissionID);\n    return output;\n  } else {\n    if (finalResult.result.streams.output) {\n      const uri = finalResult.result.streams.output.uri;\n      const response = await got(uri);\n      return response.body;\n    } else {\n      const uri = finalResult.result.streams.cmpinfo.uri;\n      const response = await got(uri);\n      return response.body;\n    }\n  }\n};\n\nrunCode(\n  `\nprint(\"Hello World!\")\n`,\n  \"python\"\n);\n"]},"metadata":{},"sourceType":"module"}