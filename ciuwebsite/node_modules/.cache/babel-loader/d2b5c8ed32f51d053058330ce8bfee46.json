{"ast":null,"code":"// This method will allow the app to have a compiler and run code from a variety of different languages\nimport fetch from 'node-fetch'; //import got from 'got';\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\nconst languages = {\n  'java': 10,\n  'c': 11,\n  'csharp': 27,\n  'cpp': 44,\n  'js': 56,\n  'python': 116\n};\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language);\n  return output;\n}; // The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\n\n\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken, {\n    method: \"POST\",\n    body: JSON.stringify({\n      compilerId: languages[language],\n      source: code\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  setTimeout(async () => {\n    const output = await getSubmission(submissionID);\n    return output;\n  }, 2000);\n};\n\nconst getSubmission = async submissionID => {\n  const result = await fetch(\"https://\" + endpoint + \"/api/v4/submissions/\" + submissionID + \"?access_token=\" + accessToken, {\n    method: \"GET\"\n  });\n  const finalResult = await result.json();\n\n  if (finalResult.executing === true) {\n    setTimeout(async () => {\n      const output = await getSubmission(submissionID);\n      return output;\n    }, 2000);\n  } else {\n    const uri = finalResult.result.streams.output.uri;\n    const response = await got(uri);\n    return response.body;\n  }\n};\n\npostSubmission(\"Hi\", \"Hello\");\nexport { runCode };","map":{"version":3,"sources":["/Users/zyad/Desktop/GitHub/CodingIsUs/ciuwebsite/src/config/Compiler.js"],"names":["fetch","accessToken","endpoint","languages","runCode","code","language","output","postSubmission","submission","method","body","JSON","stringify","compilerId","source","headers","submissionJSON","json","submissionID","id","setTimeout","getSubmission","result","finalResult","executing","uri","streams","response","got"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB,C,CACA;;AAEA,MAAMC,WAAW,GAAG,kCAApB;AACA,MAAMC,QAAQ,GAAG,sCAAjB;AAEA,MAAMC,SAAS,GAAG;AAChB,UAAQ,EADQ;AAEhB,OAAK,EAFW;AAGhB,YAAU,EAHM;AAIhB,SAAO,EAJS;AAKhB,QAAM,EALU;AAMhB,YAAU;AANM,CAAlB;;AASA,MAAMC,OAAO,GAAG,OAAOC,IAAP,EAAaC,QAAb,KAA0B;AACxC,QAAMC,MAAM,GAAG,MAAMC,cAAc,CAACH,IAAD,EAAOC,QAAP,CAAnC;AACA,SAAOC,MAAP;AACD,CAHD,C,CAKA;AACA;;;AACA,MAAMC,cAAc,GAAG,OAAOH,IAAP,EAAaC,QAAb,KAA0B;AAC/C,QAAMG,UAAU,GAAG,MAAMT,KAAK,CAC5B,aAAaE,QAAb,GAAwB,mCAAxB,GAA8DD,WADlC,EAE5B;AACES,IAAAA,MAAM,EAAE,MADV;AAEEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,UAAU,EAAEX,SAAS,CAACG,QAAD,CADF;AAEnBS,MAAAA,MAAM,EAAEV;AAFW,KAAf,CAFR;AAMEW,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AANX,GAF4B,CAA9B;AAWA,QAAMC,cAAc,GAAG,MAAMR,UAAU,CAACS,IAAX,EAA7B;AACA,QAAMC,YAAY,GAAGF,cAAc,CAACG,EAApC;AACAC,EAAAA,UAAU,CAAC,YAAY;AACrB,UAAMd,MAAM,GAAG,MAAMe,aAAa,CAACH,YAAD,CAAlC;AACA,WAAOZ,MAAP;AACD,GAHS,EAGP,IAHO,CAAV;AAID,CAlBD;;AAoBA,MAAMe,aAAa,GAAG,MAAOH,YAAP,IAAwB;AAC5C,QAAMI,MAAM,GAAG,MAAMvB,KAAK,CACxB,aACEE,QADF,GAEE,sBAFF,GAGEiB,YAHF,GAIE,gBAJF,GAKElB,WANsB,EAOxB;AACES,IAAAA,MAAM,EAAE;AADV,GAPwB,CAA1B;AAYA,QAAMc,WAAW,GAAG,MAAMD,MAAM,CAACL,IAAP,EAA1B;;AACA,MAAIM,WAAW,CAACC,SAAZ,KAA0B,IAA9B,EAAoC;AAClCJ,IAAAA,UAAU,CAAC,YAAY;AACrB,YAAMd,MAAM,GAAG,MAAMe,aAAa,CAACH,YAAD,CAAlC;AACA,aAAOZ,MAAP;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GALD,MAKO;AACL,UAAMmB,GAAG,GAAGF,WAAW,CAACD,MAAZ,CAAmBI,OAAnB,CAA2BpB,MAA3B,CAAkCmB,GAA9C;AACA,UAAME,QAAQ,GAAG,MAAMC,GAAG,CAACH,GAAD,CAA1B;AACA,WAAOE,QAAQ,CAACjB,IAAhB;AACD;AACF,CAxBD;;AA0BAH,cAAc,CAAC,IAAD,EAAO,OAAP,CAAd;AAEA,SAAQJ,OAAR","sourcesContent":["// This method will allow the app to have a compiler and run code from a variety of different languages\nimport fetch from 'node-fetch';\n//import got from 'got';\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\n\nconst languages = {\n  'java': 10,\n  'c': 11,\n  'csharp': 27,\n  'cpp': 44,\n  'js': 56,\n  'python': 116\n}\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language); \n  return output;\n}\n\n// The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\n    \"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        compilerId: languages[language],\n        source: code,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  setTimeout(async () => {\n    const output = await getSubmission(submissionID);\n    return output;\n  }, 2000);\n};\n\nconst getSubmission = async (submissionID) => {\n  const result = await fetch(\n    \"https://\" +\n      endpoint +\n      \"/api/v4/submissions/\" +\n      submissionID +\n      \"?access_token=\" +\n      accessToken,\n    {\n      method: \"GET\",\n    }\n  );\n\n  const finalResult = await result.json();\n  if (finalResult.executing === true) {\n    setTimeout(async () => {\n      const output = await getSubmission(submissionID);\n      return output;\n    }, 2000);\n  } else {\n    const uri = finalResult.result.streams.output.uri;\n    const response = await got(uri);\n    return response.body;\n  }\n};\n\npostSubmission(\"Hi\", \"Hello\");\n\nexport {runCode};\n"]},"metadata":{},"sourceType":"module"}