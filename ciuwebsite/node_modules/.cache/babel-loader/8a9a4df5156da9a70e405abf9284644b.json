{"ast":null,"code":"// This method will allow the app to have a compiler and run code from a variety of different languages\nconst fetch = require(\"node-fetch\");\n\nconst got = require(\"got\");\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\nconst languages = {\n  java: 10,\n  c: 11,\n  csharp: 27,\n  cpp: 44,\n  js: 56,\n  python: 116\n};\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language);\n  return output;\n}; // The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\n\n\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken, {\n    method: \"POST\",\n    body: JSON.stringify({\n      compilerId: languages[language],\n      source: code\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  let output = \"\";\n  setTimeout(async () => {\n    output = await getSubmission(submissionID);\n  }, 2000);\n  return output;\n};\n\nconst getSubmission = async submissionID => {\n  const result = await fetch(\"https://\" + endpoint + \"/api/v4/submissions/\" + submissionID + \"?access_token=\" + accessToken, {\n    method: \"GET\"\n  });\n  const finalResult = await result.json();\n  console.log(finalResult.streams.cmpinfo);\n  let output = '';\n\n  if (finalResult.executing === true) {\n    setTimeout(async () => {\n      output = await getSubmission(submissionID);\n    }, 2000);\n    return output;\n  } else {\n    const uri = finalResult.result.streams.output.uri;\n    const response = await got(uri);\n    return response.body;\n  }\n};\n\npostSubmission(`\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.print(\"Hi\");\n  }\n}\n`, \"java\");","map":{"version":3,"sources":["/Users/zyad/Desktop/GitHub/CodingIsUs/ciuwebsite/src/config/Compiler.js"],"names":["fetch","require","got","accessToken","endpoint","languages","java","c","csharp","cpp","js","python","runCode","code","language","output","postSubmission","submission","method","body","JSON","stringify","compilerId","source","headers","submissionJSON","json","submissionID","id","setTimeout","getSubmission","result","finalResult","console","log","streams","cmpinfo","executing","uri","response"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAME,WAAW,GAAG,kCAApB;AACA,MAAMC,QAAQ,GAAG,sCAAjB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,CAAC,EAAE,EAFa;AAGhBC,EAAAA,MAAM,EAAE,EAHQ;AAIhBC,EAAAA,GAAG,EAAE,EAJW;AAKhBC,EAAAA,EAAE,EAAE,EALY;AAMhBC,EAAAA,MAAM,EAAE;AANQ,CAAlB;;AASA,MAAMC,OAAO,GAAG,OAAOC,IAAP,EAAaC,QAAb,KAA0B;AACxC,QAAMC,MAAM,GAAG,MAAMC,cAAc,CAACH,IAAD,EAAOC,QAAP,CAAnC;AACA,SAAOC,MAAP;AACD,CAHD,C,CAKA;AACA;;;AACA,MAAMC,cAAc,GAAG,OAAOH,IAAP,EAAaC,QAAb,KAA0B;AAC/C,QAAMG,UAAU,GAAG,MAAMjB,KAAK,CAC5B,aAAaI,QAAb,GAAwB,mCAAxB,GAA8DD,WADlC,EAE5B;AACEe,IAAAA,MAAM,EAAE,MADV;AAEEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,UAAU,EAAEjB,SAAS,CAACS,QAAD,CADF;AAEnBS,MAAAA,MAAM,EAAEV;AAFW,KAAf,CAFR;AAMEW,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AANX,GAF4B,CAA9B;AAWA,QAAMC,cAAc,GAAG,MAAMR,UAAU,CAACS,IAAX,EAA7B;AACA,QAAMC,YAAY,GAAGF,cAAc,CAACG,EAApC;AACA,MAAIb,MAAM,GAAG,EAAb;AACAc,EAAAA,UAAU,CAAC,YAAY;AACrBd,IAAAA,MAAM,GAAG,MAAMe,aAAa,CAACH,YAAD,CAA5B;AACD,GAFS,EAEP,IAFO,CAAV;AAGA,SAAOZ,MAAP;AACD,CAnBD;;AAqBA,MAAMe,aAAa,GAAG,MAAOH,YAAP,IAAwB;AAC5C,QAAMI,MAAM,GAAG,MAAM/B,KAAK,CACxB,aACEI,QADF,GAEE,sBAFF,GAGEuB,YAHF,GAIE,gBAJF,GAKExB,WANsB,EAOxB;AACEe,IAAAA,MAAM,EAAE;AADV,GAPwB,CAA1B;AAYA,QAAMc,WAAW,GAAG,MAAMD,MAAM,CAACL,IAAP,EAA1B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACG,OAAZ,CAAoBC,OAAhC;AACA,MAAIrB,MAAM,GAAG,EAAb;;AACA,MAAIiB,WAAW,CAACK,SAAZ,KAA0B,IAA9B,EAAoC;AAClCR,IAAAA,UAAU,CAAC,YAAY;AACrBd,MAAAA,MAAM,GAAG,MAAMe,aAAa,CAACH,YAAD,CAA5B;AACD,KAFS,EAEP,IAFO,CAAV;AAGA,WAAOZ,MAAP;AACD,GALD,MAKO;AACL,UAAMuB,GAAG,GAAGN,WAAW,CAACD,MAAZ,CAAmBI,OAAnB,CAA2BpB,MAA3B,CAAkCuB,GAA9C;AACA,UAAMC,QAAQ,GAAG,MAAMrC,GAAG,CAACoC,GAAD,CAA1B;AACA,WAAOC,QAAQ,CAACpB,IAAhB;AACD;AACF,CA1BD;;AA2BAH,cAAc,CACX;AACH;AACA;AACA;AACA;AACA;AACA,CAPc,EAQZ,MARY,CAAd","sourcesContent":["// This method will allow the app to have a compiler and run code from a variety of different languages\nconst fetch = require(\"node-fetch\");\nconst got = require(\"got\");\n\nconst accessToken = \"8ca5858d335f9887bfda937a1517cbae\";\nconst endpoint = \"c8f4cd08.compilers.sphere-engine.com\";\n\nconst languages = {\n  java: 10,\n  c: 11,\n  csharp: 27,\n  cpp: 44,\n  js: 56,\n  python: 116,\n};\n\nconst runCode = async (code, language) => {\n  const output = await postSubmission(code, language);\n  return output;\n};\n\n// The method will take in the string containing the code to compile. It will also take in a string that will\n// determine the language to compile\nconst postSubmission = async (code, language) => {\n  const submission = await fetch(\n    \"https://\" + endpoint + \"/api/v4/submissions?access_token=\" + accessToken,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        compilerId: languages[language],\n        source: code,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const submissionJSON = await submission.json();\n  const submissionID = submissionJSON.id;\n  let output = \"\";\n  setTimeout(async () => {\n    output = await getSubmission(submissionID);\n  }, 2000);\n  return output;\n};\n\nconst getSubmission = async (submissionID) => {\n  const result = await fetch(\n    \"https://\" +\n      endpoint +\n      \"/api/v4/submissions/\" +\n      submissionID +\n      \"?access_token=\" +\n      accessToken,\n    {\n      method: \"GET\",\n    }\n  );\n\n  const finalResult = await result.json();\n  console.log(finalResult.streams.cmpinfo);\n  let output = '';\n  if (finalResult.executing === true) {\n    setTimeout(async () => {\n      output = await getSubmission(submissionID);\n    }, 2000);\n    return output;\n  } else {\n    const uri = finalResult.result.streams.output.uri;\n    const response = await got(uri);\n    return response.body;\n  }\n};\npostSubmission(\n  `\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.print(\"Hi\");\n  }\n}\n`,\n  \"java\"\n);\n"]},"metadata":{},"sourceType":"module"}